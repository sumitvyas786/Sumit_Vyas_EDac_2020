
import java.util.*; 
  
class Node  
{ 
    int data; 
    Node next; 
    Node(int d)
    {
        data = d; 
        next = null;
    } 
} 
      
class Merging_LinkList 
{ 
Node head;  
  
public void addToTheLast(Node node)  
{ 
    if (head == null) 
    { 
        head = node; 
    } 
    else 
    { 
        Node temp = head; 
        while (temp.next != null) 
            temp = temp.next; 
        temp.next = node; 
    } 
} 
  
void printList() 
{ 
    Node temp = head; 
    while (temp != null) 
    { 
        System.out.print(temp.data + " "); 
        temp = temp.next; 
    }  
    System.out.println(); 
} 
  
  
public static void main(String args[]) 
{ 
    Merging_LinkList llist1 = new Merging_LinkList(); 
    Merging_LinkList llist2 = new Merging_LinkList(); 
      
    // Node head1 = new Node(5); 
    llist1.addToTheLast(new Node(5)); 
    llist1.addToTheLast(new Node(10)); 
    llist1.addToTheLast(new Node(15)); 
    
    llist1.printList();
    
    // Node head2 = new Node(2); 
    llist2.addToTheLast(new Node(2)); 
    llist2.addToTheLast(new Node(3)); 
    llist2.addToTheLast(new Node(20)); 
    
    llist2.printList();
      
    llist1.head = new merge().sortedMerge(llist1.head, llist2.head); 
    llist1.printList();      
      
} 
} 
  
class merge 
{ 
Node sortedMerge(Node headA, Node headB) 
{
    Node dummyNode = new Node(0); 
      
    Node tail = dummyNode; 
    while(true)  
    { 
        if(headA == null) 
        { 
            tail.next = headB; 
            break; 
        } 
        if(headB == null) 
        { 
            tail.next = headA; 
            break; 
        } 
          
        
        if(headA.data <= headB.data) 
        { 
            tail.next = headA; 
            headA = headA.next; 
        }  
        else
        { 
            tail.next = headB; 
            headB = headB.next; 
        } 
          
        tail = tail.next; 
    } 
    return dummyNode.next; 
} 
} 
